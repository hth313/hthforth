{-# LANGUAGE OverloadedStrings #-}
{-
  Generic code generation support.
  This is meant for textual output of assembler code, without doing any transformations
  or optimizations, just plain output.
-}

module Translator.Assembler.Generate (IM, insRec, insLabRec, insEmpty, labRec,
                                      recWrap,
                                      insList, emitCode) where

import Data.Monoid
import Data.List
import Translator.Symbol
import qualified Data.DList as DL
import Data.DList (DList)
import System.IO
import qualified Data.ByteString.Char8 as C
import Blaze.ByteString.Builder
import Blaze.ByteString.Builder.Char8
import Translator.Assembler.InstructionSet


-- | Instruction monoid we code generate over.
type IM a = DList (InsRec a)

-- | Instruction records. These are typically assembler instructions that
--   can have either a label (symbol), assembler instruction, or both.
data InsRec i = InsRec i | InsLabRec Symbol i | LabRec Symbol | EmptyRec

-- | Instruction record elevated into the instruction monoid
insRec :: a -> IM a
insRec = recWrap . InsRec

recWrap = DL.singleton

insLabRec :: Symbol -> a -> IM a
insLabRec sym i = recWrap $ InsLabRec sym i

insEmpty :: IM a
insEmpty = recWrap EmptyRec

labRec :: Symbol -> IM a
labRec = recWrap . LabRec

spaces14 = replicate 14 ' '

nl = fromByteString "\n"

fromSymbol = fromString . unintern

-- | Get the instructions as a list.
insList = DL.toList

emitRec (InsRec i) = fromByteString "              " <> ppi (disassemble i) <> nl
emitRec (LabRec lab) = fromSymbol lab <> fromByteString ":" <> nl
emitRec (InsLabRec lab i) = fromSymbol lab <> fromByteString ":" <>
                            fromString (drop (1 + fromIntegral (length $ unintern lab)) spaces14) <>
                            ppi (disassemble i) <> nl
emitRec EmptyRec = nl
ppi (mne, Nothing) = fromString mne
ppi (mne, Just ops) = fromString mne <> fromString (drop (length mne) spaces14) <>
                      fromString (intercalate "," ops)

emitCode code = toLazyByteString $ disclaimer <> (mconcat $ map emitRec $ insList code)
disclaimer = fromByteString "/* Automatically generated by code, do not edit by hand! */" <> nl <> nl
