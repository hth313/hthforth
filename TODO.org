#+STARTUP: indent
#+STARTUP: showall
#+PROPERTY: Effort_ALL 0 0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00 10:00 12:00 14:00 16:00
#+COLUMNS: %60ITEM(Task) %8Effort(Estimated Effort){:} %CLOCKSUM
#+TODO: TODO | DONE CANCELED

* Forth
** DONE implement some kind of load relative screen facility
*** TODO need to update BLK with the block being loaded (load in Forth.Machine)
*** TODO FH is a colon word, so now EXECUTE need to be able to execute such
** DONE Investigate if it is possible to use ideas from tagless-final to encode Forth words.
*** DONE Prototype in a small setting to see if the idea could be expressed.
*** DONE What should be in XT?
*** DONE Rename FMonad to FM
*** DONE Addresssr.hs, CellMemory.hs, DataField.hs, Input.hs can be moved in under Interpreter/
*** DONE Make fundep work with mainLopo and back to the instance
*** DONE Try to use the lens package to simplify updates to FState
*** DONE Is it possible to use some suitable monad to model abortions of the computation?
*** DONE A word could have its DO-form as a class function, a DO-COLON could probably be modeled with a simple list. The IP would be the list, stepping forward is just cdr, a branch embeds part of the list so that the head is the next instruction to execute.
*** DONE Each element in a colon list need to encode the word somehow
** DONE Revise 'next', let primitives call it when done
** DONE Check changes in the corrupt version, I think the .fs file was changed as well?
** DONE '(execute :: FM cell ())  >> interpret' is clumsy, is there a better way of saying that I want it to have ()?
** DONE Implement compile, part is commented away, and the actual compile is 'return ()'
** DONE Make it possible to start loading the core.fs file again
** DONE When aborting, close any pending defining (compiling) state
** DONE What is the Language.Forth.Input module for? (does not seem to be used)
** DONE ': QQ' <RET> causes out of bounds in Vector.!
** DONE Compilation cannot bIne split safely over multiple input lines
** DONE Rename xword to word
** DONE Can we merge Word and WordId into the same module?
** DONE Interpret is not good
*** DONE try to rewrite it to be simpler and more Forth-like
*** DONE interpret need to use a proper loop, will kill the rstack as it is now
** DONE Uses of push can probably be replaced with lit
** DONE Make IF word properly (probably need to handle the backpatching code)
** DONE Implement UM/MOD, what about signed vs unsigned conversion here?
** DONE Clean up Primitives, ROT, EVALUATE, FALSE, TRUE, slash and variables are not primitive
** DONE Consider refactoring to helper function style with pattern guards, it could make the code more concise
** DONE Printing a negative number with EMIT cause a crash (Prelude.chr bad argument)
** DONE Get rid of the .fth file
** DONE Load more of core.fs
** CANCELED Clean up cprim/cprim1
- [X] Is it possible to get rid of cprim1 and use cprim instead? [drop it, seems not worth the trouble]
- [X] Move it back into place
** DONE Make create part of the Compiler record so we can create new words for targets
** DONE searchDict should look perhaps look for whether a given word have been defined
** DONE Fix type variable, from t to a in Interpreter
** DONE If FIND cannot find a word being compiled when cross compiling, it does not leave compilation mode.
** DONE Add INTERPRETER word to allow switching back to defining words for the interpreter
** TODO Make more use of lens operators, now it is just done partly without too much thought
** DONE Trying to run a word defined when cross compiling could give information that the word only exists for a target, now it prints '?' which technically is correct
** DONE Put wids at top level, we do not need different number series
** TODO Prototype with a Cortex-M target, to see if tagless style also works fine with code generation
*** DONE Target gnu or clang assembler
*** TODO Take some inspiration from riscy pygness forth for ARM, use 16-bit tokenization table
*** DONE Code generate to suitable instructions, can probably be some more highlevel generic macros to make up colon definitions.
*** DONE Extend the high level instructions with actual thumb2 assembler
*** DONE Is it possible to keep the instructions in tagless final style?
**** DONE Benefits woult be easy extensions from a generic core set to actual taget instructions
**** DONE We probably only need to print the disassembler output though
*** DONE Make use of monoid an dswitch to Data.Text to print out the assembler code
** DONE Set up for Travis CI
** DONE Reformat TargetPrimitive.
** DONE Target VARIABLE are not created, or at least not closed properly
** DONE Need to add some library code for dohere
** DONE Make ALLOT work on target
** DONE Set up RAMBASE and reserve space in RAM memory
** DONE constant in Primitive, is that good for targets?
- [X] figure out if 'constant' should be used, or the new 'doconst'
- [ ] add modifiers, like FLASH, that control different placement memories, other targets could have further alternatives, ponder over if it should be part of TargetPrimitive or defined at Forth level, though we do not have any target specific Forth code
- [X] make it possible to generate inline code to push the constant and then do next
- [ ] need to get the stack value as expression and embed it in the defining record
- [ ] for arm, push a pc relative constant, but it has to be stored after the 'b next', which means there is a need for a local label?
** TODO Make it possible to build constant tables somehow, that is, a here pointer to the constant data area compiled into the body of the word, see how the standard deals with this
- [ ] Constant tables need to have something like CCREATE or FLASH-CREATE, see if there is any standard on this
- [ ] Writable data tables are also possible, these are created using CREATE, ALLOT to zerofill(?) and comma (,) and (C,) to write initialized data
- [ ] need some startup code to populate writable data tables
** DONE Use common name for DOCOL, NEXT and LIT
** DONE Rename smudge to something more meaningful for people that are not familiar with that concept
** DONE ' word CONSTANT name casues a crash as we cannot compile an XT as a literal
** TODO Literal constant should store the full cell address, but a compiled word needs to be a 16-bit token, how to handle that?
** TODO Is there a double memory indirection on CortexM?
** TODO Should we change name of DOHERE to something else? DOPTR perhaps?
** TODO Is COMPILE-ONLY a good way to mark words that have no interpretation semantics? Seems so, but it may have implications in that you cannot TICK such word, and that seems to be a very controversal topic in the Forth community. It can become untickable by FIND not being allowed to find it, and that may or may not be desirable?
** TODO Cannot define a CONSTANT in a target
** TODO Also questionable why 'constant' is part of Primitive
** TODO What about 'lit' in Primitive, is that really to be there as a target currently ignores its argument?
** TODO Add a file with basic high level target words, i.e. those that the host defines in Interpreter.hs
** TODO Refactor core.fs to be host-core.fs and target-core.fs with no duplicated definitions
** DONE Refactor nameMangle, it should be in Symbol
** TODO Implement a means of targets to override a colon definition with native code if it makes sense, ROT is probably a good example
** TODO Think through the distinction of interpreter and cross compiler. Ref http://www.threaded-interpreter.org/manual/howtos/chap_howto_cross_compiler.html
- [ ] Compiler defining words can be in the interpreter side, or both. This depends on if we are building an image or a system for the target, suitable words can be used here to control behavior
- [ ] INTERPRETER and especially CROSS-COMPILER are misleading. We are actually building for the cross compiler or target, maybe revise naming here
- [ ] TARGET could mean we are generating words for target only
- [ ] CROSS-COMPILER could mean we are generating words for cross compiler (current interpreter) only
- [ ] CROSS-COMPILER-SYSTEM could indicate that we want to steer words to the cross compiler (current interpreter) and for target system (active if we are building a system)
- [ ] TARGET-FORTH-SYSTEM specify that we are building for a full target system
- [ ] TARGET-STANDALONE specify that we are building for a standalone system (target cannot compile)
** TODO Implementation references
http://amforth.sourceforge.net/TG/Implementation.html
http://www.calcentral.com/~forth/forth/
http://www.forth.org/eforth.html
** DONE MOVE should not clobber memory, maybe use memmove?
** TODO Use (BRANCH) and (BRANCH0) as target words to implement branches, look at amforth reference above for ideas on how to do it
** TODO Start writing the documention, get all non-standard words into it as we go
** TODO Get to a position where we can build and test target code
- [ ] get GAS into place
- [ ] use qemu as simulator and see if it is possible to automate test code
- [ ] get it running under travis or jenkins
- [ ] add the available Forth standard test code and run it
** TODO Put in ANS numbers for words that are part of the standard.
** TODO Add some comment at the start of core.fs saying that this is core words with additions from other word sets that seemed suitable building blocks to be used in the core set.
** TODO dot on an address gives 'empty stack', which is not true, partially fixed, now it complains that it cannot perform 0< on a non-number
** DONE Implement ENVIRONMENT? (by not providing any information)
** TODO ABORT" should check at runtime for non-zero input and conditionally abort
** TODO Should ABORT display 'ok'? Currently it does not, is that right?
** DONE Improve HERE so that it can be used for datafield on latest word
** DONE Should +! be outside Primitive? Consider if words that are to be implemented using colon definitions, such as INTERPRET, QUIT and perhaps others should be outside as well
** TODO Many core words have different implementation in the interpreter compared to what can be expected on a target. WORD, IF and DO are examples. Figure out what to do with them. A mechanism to do conditional compilation is probably needed here.
*** TODO Need a second core.fs file with things the target like, or some conditional compilation. We do not want to redefine control words for the interpreter. See [IF] on tools-ext
*** TODO WORD can be handled using some mechanism to define a transient area (like HERE or offseted from HERE). I think some early Forth systems rely on that WORD put the name in a place suitable to a WORD header being created?
** DONE Move Forth module up one level
** DONE consider moving away from the Parsec parser. The benefit would be that we gain access to the input stream which several words want (see what words relate to this, hint >IN).
Idea: input is represented by InputSource which holds a ByteString, which is the block contents (or input buffer text). An address (BufferAdr) can point inside it as well. This is paired with a capacity which is an ordinary Val.
** DONE Constant does not have a proper runtime behavior, it acts as a variable, need to be fixed
** DONE How to put words that require arguments into the dictionary? As it is now, they are not in dictionary as it causes a type mismatch. A special helper word could be used to help compile them, and maybe that word should have the name of the word being compiled?
** DONE How to compile branches. We build a body using a Vector of words. A branch have a dummy place holder in the Vector and there is a [(Int, (branch . (drop N)))]' where snd is to be applied to the vector converted to list and inserted at the fst index in the vector:
  let cs = V.toList $ (V.//) vectorbody [(3,branch (drop 2 cs))]
** TODO Looping with SRC-SPAN, is there a better way?
** DONE figure out how to deal with compile-time and run-tume behavior (CREATE DOES>), figured out but need to be implement in the compiler
*** DONE Need to SMUDGE to get the word online when DOES> is executed
*** DONE Comma need to write a value to the next cell of a datafield with dealing with a CREATE word
*** DONE CREATE should add a lit-adr to the colon list of the word being created. DOES> stops execution and appends the rest to word being created. dodoes is not needed as we can put the action to pushadr upfront when doing CREATE
** TODO consider small constants as words, 0 1 2 4 -1 (are they in the standard anymore?)
** DONE what about XTS, execution token size, is there some well defined name for it in the standard like it is for CELLS and CHARS? Changed to INSTR at the moment, WORD would be better except for that it is (probably) taken for other use.
** DONE implement (LIT) (or call it _LIT) to load a literal, it probably need to be different in Haskell compared to target
** TODO check M* vs UM*, should they really be the same function?
** DONE unary/binary need to be rather flexible on inputs, as (+) accept Address mixed with Val, but that flexibility is not always valid, how do we deal with bad cases?
** TODO Forth.Core.store has to be flexible when storing values, it allows anything, but that does not always make sence, i.e. storing an Address using C!
** TODO Control.Monad.Error, consider if it should be used (ErrorT)
** DONE the , word is just too complicated, it is better defined in Forth, which means that HERE/DP/ALLOT should be defined instead. It should also be transparent whether we are defining a data word or a colon definition. Thus, manipulating DP with an address that can point to either kind of word being defined would probably help a lot. DP is not defined from start, so this feature can only be used after it has been created.
** TODO try hlint
** TODO literals can be compiled as sign extended half words, which should save space, at least on targets that have larger cell size than token size
** TODO need a primitive that allows to specify and load a screen file
** TODO add command line switch to specify command line to be executed, like "LOAD 1"
** DONE There could be two different addresses, Address and ColonAddress so we know what we are writing to. This is because a data field use DataField, which is based on a Map, while a colon definition is a list. This will most likely show its need when "," is executed, though that will be the colon LITERAL for which we have a lambda, maybe control words will need it later.
** TODO Locals and quotations. It would be interestinf to implement locals using a high level mechanism that is in common use (TBD). Try to use the LOCALS word set as a basis for it, but do not feel constrained by it.
*** TODO When doing this, consider implementing quotations and allow them to access the enclosing parent enviroment.
*** TODO Arbitrary nesting of quotations should be allowed.
*** TODO Store the enclosing frame as a local variable in the frame, i.e. as the first one. Moving up frames can be done using @
*** TODO Use FP@ and FP! to adjust frame pointer, FP@ 1 CELL+ @ can be used to access local number 1, that way the code gets portable and reasonable fast. Better is to do the CELL+ at compile time. To access in previous frame, FP@ @ 1 CELL+ @  Using FP@ and FP! makes it possible to realize the frame pointer in a register. Only one FP register is needed, trying to use two will not work in various deeply nested environments with quotations.
*** TODO Quotations can have its own locals, as well as accesssing the enclosing environemnt.
*** TODO An xt should still be a simple code pointer, which means that a quotation which accesses the enclosing enviroment need a dynamic wrapper to set things up and restore when done, this can be created as part of setting up the environment for the parent. Make some simple native building words for this, rely a lot on colon code.
** TODO Modernize FIND, WORD and the interpreter loop. These words are not as flexible as one might like (FIND cannot find IF in interpreter mode), they also use counted strings. xt is limited in that it does not allow access to the name of a word, or other fields that may exist. To be standard, FIND and friends need to exist, but they should be defined in terms of something else.
- gforth have name tokens, which seems like a good idea http://www.complang.tuwien.ac.at/forth/gforth/Docs-html/Name-token.html
- "The most elegant Forth interpreter" in comp.lang.forth contains something that might be worth considering when doing this.
- PARSE-NAME ( "<spaces>name<space> -- caddr u )  is a good standard word to use
- FIND-NAME ( caddr u -- nt | 0 ) get a name token
- Get rid of state smart words, use separated compilation semantics, to mimic the standard closer. That means dual XT, which is an alternative approach compared to using IMMEDIATE. While I do not like dual XTs, it has the advantage of following the standard in a closer way. Need to ponder over this.
- IN ( -- caddr ) the pointer in the input buffer, this is non-standard, but may be a more natural way to work with the input pointer.
  Implement : >IN  IN SOURCE DROP - ;
- ciforth uses PREFIX, should be worth looking at, the alternative is the less flexible (NUMBER) handling
*** TODO Consider an approach where there is a word token. Base it on either name token or execution token. When such a word is at TOS, it is also in a register. Most controllers have displacement indirect addressing modes. By basing it on a base address token, it is easy to look up a name field, interpreter XT, compiling XT as well as follow the pointer to the next word. Thus, a header could consist of a small structure of pointers, pointing to various aspects of the word. Actual data can follow immediately, or be elsewhere, no one will know. RAM dat fields are in RAM, strings can be in an unaligned area.
One variant could have name field starting at fixed offest, like:
{ interpreter-XT, compile-XT, link-field, actual-name }
After this, any same memory data an follow (pointed to from XT). This gives a lot of flexibility, XT would point to a docol with the compiled token following.
It would make a more natural way to describe the separate interpreter/compilation semantics. Aliases also fits in naturally.
**** TODO Create a new type class containing functions to build up parts of the header
**** TODO Use dual XT, or more generally a kind of VTABLE, future word classes could extend the VTABLE
*** TODO Factor out "new" words to be used
*** TODO Read the paper about state words being harmful
*** TODO Put definitions of the old style into a compatibility word set, core-compatibility.fs
*** TODO Figure out how to deal with different semantics, if dual xt is acceptable or if we can find a better way
*** TODO Think about constants, the numeric reader could really be a lot more flexible and featureful. Take a look at "The most elegant Forth interpreter"
*** TODO What other word related tokens are useful? gforth might be worth looking at, but there may be others. It can also vary depending on the compilation approach being used.
** TODO Do some pondering on how to define actual building blocks using type classes, to build up different ways to realize how words are implemented.
