hthforth is a Forth-2012 written in Haskell and Forth. The idea is to
keep pace with the development of the proposed Forth 200x standard
(currently called Forth-2012).
Visit http://www.forth200x.org for more information.

This project is under development and is currently not complete in any
way.

At the moment the aim is to have fun implementing Forth and provide a
subset of the standard by implementing the core set of words, probably
including core-ext words as well.

This Forth can be used standalone, just build it using Haskell
cabal. Another use would be as an embedded scripting language in
a Haskell application.
However, the main idea is to make it act as a cross compiler for
embedded systems development.

Forth works differently from many other languages in that it basically
lacks syntax and is not suitable to parse using typical parsing techniques.
Instead, one have to build a Forth system from another Forth which acts as
a bootstrapper, a technique that is called meta compiling in the Forth
world. This Forth is meant to be such meta compiler, or perhaps more
correctly, a cross compiler, as the intended target will be different.

To build hthforth, you will need to have Haskell installed. The
current version of GHC used is 7.8.3.

In order to build hthforth with GHC 7.8.x you need to download
vector-bytestring (https://github.com/basvandijk/vector-bytestring)
and modify it to accept base < 4.8

With a suitable GHC, do the following in the top level directory:
% cabal configure
% cabal build

To run:
% dist/build/hthforth/hthforth

When started, there is a very small subset of core words available. To
bring more words in (it will currently fail a bit into the file):
LOAD-SOURCE src/lib/core.fs

To exit hthforth, type BYE or press Ctrl-C.

Haskeline is used, so you have full command line history and editing
available.

July 2014, Håkan Thörngren, hth313@gmail.com

There is also a Trello board for this project available at
https://trello.com/b/HNLHA3en/hthforth which is currently
not kept so well updated. Most project planning and ideas
take place in the TODO.org (which is not always up to date in
the repository), a file to be opened with Emacs org mode.
